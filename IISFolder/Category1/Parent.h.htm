<!--
Parent.h.htm- Html file for Parent.h
 Published: 4th April 2017 
Nikhil Prashar, CSE687 - Object Oriented Design, Spring 2017
-->
<html>
<!--
HtmlHeader.htm- Common html header file.
 Published: 4th April 2017 
Nikhil Prashar, CSE687 - Object Oriented Design, Spring 2017
-->
<head>
<link rel = "stylesheet" href = "../../ScriptingFiles/styles.css" />
<script src="../../ScriptingFiles/JavaScriptFile.js"></script>
</head>
<body>
<table id="myTable" style="border:0"><tr><th style="border:0"><h1>Parent.h</h1></th><th style="border:0"><h3 align="right"><a href="index.htm">Back to Table Of Contents</a></h3></th></tr></table><hr />
<div class="indent">
<h4>dependencies:</h4>
<a href="Child.h.htm">Child.h</a>
<a href="Child2.h.htm">Child2.h</a>
<a href="Test.cpp.htm">Test.cpp</a>
</div>
<hr />
<pre>
#ifndef SCOPESTACK_H
#define SCOPESTACK_H
#pragma once


#include "Child2.h"
#include "Child.h"
#include "Invalid.h"
#include &lt;list&gt;


<button onClick = "myFunction('1','button1')" id="button1">-</button>namespace parent1
{<span id="1">
<button onClick = "myFunction('2','button2')" id="button2">-</button>	namespace parent2
	{<span id="2">
		template&lt;typename T&gt;
	<button onClick = "myFunction('3','button3')" id="button3">-</button>	class Parent {<span id="3">
			using namespace ChildTest;
		public:
			void push(const T& item);
			T pop();
		private:
			data d;
			std::list&lt;T&gt; stack;
			Child child;
		</span>};


		template&lt;class T&gt;
	<button onClick = "myFunction('4','button4')" id="button4">-</button>	void Parent&lt;T&gt;::push(const T& item)
		{<span id="4">
			stack.push_back(item);
		</span>}

		template&lt;class T&gt;
	<button onClick = "myFunction('5','button5')" id="button5">-</button>	T Parent&lt;T&gt;::pop()
		{<span id="5">
			T item = stack.back();
			stack.pop_back();
			globalData++;
			return item;
		</span>}
	</span>}

</span>}
#endif
</pre>
</body>
</html>